{
    "agbcc": "agbcc",
    "agbccpp": "agbccpp",
    "armcc_40_771": "4.0 build 771",
    "armcc_40_821": "4.0 build 821",
    "armcc_41_561": "4.1 build 561",
    "armcc_41_713": "4.1 build 713",
    "armcc_41_894": "4.1 build 894",
    "armcc_41_921": "4.1 build 921",
    "armcc_41_1049": "4.1 build 1049",
    "armcc_41_1440": "4.1 build 1440",
    "armcc_41_1454": "4.1 build 1454",
    "armcc_504_82": "5.04 build 82",
    "clang-3.9.1": "Clang 3.9.1",
    "clang-4.0.1": "Clang 4.0.1",
    "dummy": "Dummy",
    "ee-gcc2.9-990721": "EE GCC 2.9 build 990721",
    "ee-gcc2.96": "EE GCC 2.96 build 001003-1",
    "ee-gcc3.2-040921": "EE GCC 3.2 build 040921",
    "egcs_1.1.2-4": "EGCS 1.1.2-4 (gcc egcs-2.91.66)",
    "gcc2.7.2kmc": "GCC 2.7.2 (KMC)",
    "gcc2.7.2sn": "GCC 2.7.2 (SN)",
    "gcc2.7.2snew": "GCC 2.7.2 (SN, experimental)",
    "gcc2.8.1sn-cxx": "GCC 2.8.1 (SN) (C++)",
    "gcc2.8.1": "GCC 2.8.1",
    "ido5.3_irix": "IDO 5.3",
    "ido7.1_irix": "IDO 7.1",
    "ido5.3": "IDO 5.3",
    "ido5.3Pascal": "IDO 5.3 Pascal",
    "ido7.1": "IDO 7.1",
    "ido7.1Pascal": "IDO 7.1 Pascal",
    "mwcc_20_72": "2.0 build 72 (MW 1.2base)",
    "mwcc_20_79": "2.0 build 79 (MW 1.2sp2)",
    "mwcc_20_82": "2.0 build 82 (MW 1.2sp2p3)",
    "mwcc_20_84": "2.0 build 84 (MW 1.2sp3)",
    "mwcc_20_87": "2.0 build 87 (MW 1.2sp4)",
    "mwcc_233_144": "2.3.3 build 144 (GC MW 1.0)",
    "mwcc_233_159": "2.3.3 build 159 (GC MW 1.1)",
    "mwcc_233_163": "2.3.3 build 163 (GC MW 1.2.5)",
    "mwcc_233_163e": "2.3.3 build 163 (GC MW 1.2.5e)",
    "mwcc_242_81": "2.4.2 build 81 (GC MW 1.3.2)",
    "mwcc_247_105": "2.4.7 build 105 (GC MW 2.5)",
    "mwcc_247_107": "2.4.7 build 107 (GC MW 2.6)",
    "mwcc_247_108": "2.4.7 build 108 (GC MW 2.7)",
    "mwcc_247_92": "2.4.7 build 92 (GC MW 2.0)",
    "mwcc_30_114": "3.0 build 114 (MW 2.0base)",
    "mwcc_30_123": "3.0 build 123 (MW 2.0sp1)",
    "mwcc_30_126": "3.0 build 126 (MW 2.0sp1p2)",
    "mwcc_30_131": "3.0 build 131 (MW 2.0sp1p5)",
    "mwcc_30_133": "3.0 build 133 (MW 2.0sp1p6)",
    "mwcc_30_134": "3.0 build 134 (MW 2.0sp1p7)",
    "mwcc_30_136": "3.0 build 136 (MW 2.0sp2)",
    "mwcc_30_137": "3.0 build 137 (MW 2.0sp2p2)",
    "mwcc_30_138": "3.0 build 138 (MW 2.0sp2p3)",
    "mwcc_30_139": "3.0 build 139 (MW 2.0sp2p4)",
    "mwcc_40_1018": "4.0 build 1018 (MW 1.1)",
    "mwcc_40_1024": "4.0 build 1024 (MW 1.1p1)",
    "mwcc_40_1026": "4.0 build 1026 (MW 1.2)",
    "mwcc_40_1027": "4.0 build 1027 (MW 1.2p1)",
    "mwcc_40_1028": "4.0 build 1028 (MW 1.2p2)",
    "mwcc_40_1034": "4.0 build 1034 (MW 1.3)",
    "mwcc_40_1036": "4.0 build 1036 (MW 1.3p1)",
    "mwcc_40_1051": "4.0 build 1051 (MW 1.6sp1)",
    "mwcc_41_60126": "4.1 build 60126 (GC MW 3.0a3)",
    "mwcc_41_60831": "4.1 build 60831 (GC MW 3.0)",
    "mwcc_42_127": "4.2 build 127 (Patched 142 build)",
    "mwcc_42_142": "4.2 build 142 (Wii MW 1.0)",
    "mwcc_43_151": "4.3 build 151 (Wii MW 1.1)",
    "mwcc_43_172": "4.3 build 172 (Wii MW 1.3)",
    "mwcc_43_213": "4.3 build 213 (Wii MW 1.7)",
    "mwcppc_23": "MWCPPC 2.3 (CodeWarrior Pro 5)",
    "mwcppc_24": "MWCPPC 2.4 (CodeWarrior Pro 6)",
    "old_agbcc": "old_agbcc",
    "gcc-5370": "GCC 4.0.1 (Xcode 2.5) (C)",
    "gcc-5370-cpp": "GCC 4.0.1 (Xcode 2.5) (C++)",
    "gcc-5363": "GCC 4.0.1 (Xcode 2.4) (C)",
    "gcc-5363-cpp": "GCC 4.0.1 (Xcode 2.4) (C++)",
    "gcc-5026": "GCC 4.0.0 (Xcode 2.1) (C)",
    "gcc-5026-cpp": "GCC 4.0.0 (Xcode 2.1) (C++)",
    "gcc3-1041": "GCC 3.1 (Mac OS 10.1.4) (C)",
    "psyq3.5": "PSYQ3.5 (gcc 2.6.0 + aspsx 2.34)",
    "psyq3.6": "PSYQ3.6 (gcc 2.6.3 + aspsx 2.34)",
    "psyq4.0": "PSYQ4.0 (gcc 2.7.2)",
    "psyq4.1": "PSYQ4.1 (gcc 2.7.2)",
    "psyq4.3": "PSYQ4.3 (gcc 2.8.1)",
    "psyq4.5": "PSYQ4.5 (gcc 2.91.66)",
    "psyq4.6": "PSYQ4.6 (gcc 2.95.2)",

    "armcc_opt_level": "Optimization level",
    "armcc_opt_level.-O0": "No optimization",
    "armcc_opt_level.-O1": "Some optimization",
    "armcc_opt_level.-O2": "Standard optimization",
    "armcc_opt_level.-O3": "Heavy optimization",
    "armcc_opt_level.-Ospace": "Size optimization",
    "armcc_opt_level.-Otime": "Speed optimization",
    "armcc_language": "Language",
    "armcc_language.--c90": "C90",
    "armcc_language.--c99": "C99",
    "armcc_language.--cpp": "C++",
    "armcc_instset": "Instruction set",
    "armcc_instset.--arm": "ARM",
    "armcc_instset.--thumb": "THUMB",
    "armcc_debug": "Debug information",

    "clang_opt_level": "Optimization level",
    "clang_opt_level.-O0": "No optimization",
    "clang_opt_level.-O1": "Some optimization",
    "clang_opt_level.-O2": "Heavy optimization",
    "clang_opt_level.-O3": "Aggressive optimization at the expense of code size",
    "clang_opt_level.-Ofast": "All options from -O3 + optimizations that may violate strict compliance with language standards",
    "clang_opt_level.-Os": "Like -O2, but optimize for smallest code size",
    "clang_opt_level.-Oz": "Like -Os, but reduces code size further",
    "clang_debug_level": "Debug information",
    "clang_debug_level.-g0": "No debug info",
    "clang_debug_level.-g1": "Minimal trace info",
    "clang_debug_level.-g2": "Local variable tracking",
    "clang_debug_level.-g3": "Macro expansions",
    "clang_language": "Language",
    "clang_language.-x c++": "C++",
    "clang_language.-x c": "C",
    "clang_language_standard": "Language standard",
    "clang_language_standard.-std=c++98": "ISO C++ 1998 with amendments",
    "clang_language_standard.-std=c++03": "ISO C++ 1998 with amendments",
    "clang_language_standard.-std=gnu++98": "ISO C++ 1998 with amendments and GNU extensions",
    "clang_language_standard.-std=c++0x": "ISO C++ 2011 with amendments",
    "clang_language_standard.-std=c++11": "ISO C++ 2011 with amendments",
    "clang_language_standard.-std=gnu++0x": "ISO C++ 2011 with amendments and GNU extensions",
    "clang_language_standard.-std=gnu++11": "ISO C++ 2011 with amendments and GNU extensions",
    "clang_language_standard.-std=c++1y": "ISO C++ 2014 with amendments",
    "clang_language_standard.-std=c++14": "ISO C++ 2014 with amendments",
    "clang_language_standard.-std=gnu++1y": "ISO C++ 2014 with amendments and GNU extensions",
    "clang_language_standard.-std=gnu++14": "ISO C++ 2014 with amendments and GNU extensions",
    "clang_language_standard.-std=c++1z": "Working draft for ISO C++ 2017",
    "clang_language_standard.-std=gnu++1z": "Working draft for ISO C++ 2017 and GNU extensions",
    "clang_no_rtti": "Disable standard c++ runtime type information features",
    "clang_no_exceptions": "Disable exception handling",

    "gcc_opt_level": "Optimization level",
    "gcc_opt_level.-O0": "No optimization",
    "gcc_opt_level.-O1": "Some optimization",
    "gcc_opt_level.-O2": "Standard optimization",
    "gcc_opt_level.-O3": "Heavy optimization",
    "gcc_debug_level": "Debug information",
    "gcc_debug_level.-g0": "No debug info",
    "gcc_debug_level.-g1": "Minimal trace info",
    "gcc_debug_level.-g2": "Local variable tracking",
    "gcc_debug_level.-g3": "Macro expansions",
    "gcc_debug_level.-gdwarf": "DWARF debug info (for SN64, should not affect codegen)",
    "gcc_debug_level.-gdwarf-2": "DWARF 2 debug info (should not affect codegen)",
    "gcc_force_addr": "Force memory address constants to be copied into registers before doing arithmetic on them",

    "ido_opt_level": "Optimization level",
    "ido_opt_level.-O0": "No optimization",
    "ido_opt_level.-O1": "Some optimization",
    "ido_opt_level.-O2": "Standard optimization",
    "ido_opt_level.-O3": "Heavy optimization",
    "ido_debug_level": "Debug information",
    "ido_debug_level.-g0": "No debug info",
    "ido_debug_level.-g1": "Minimal trace info",
    "ido_debug_level.-g2": "Local variable tracking",
    "ido_debug_level.-g3": "Macro expansions",

    "mwcc_opt_level": "Optimization level",
    "mwcc_opt_level.-O0": "No optimization",
    "mwcc_opt_level.-O1": "Some optimization",
    "mwcc_opt_level.-O1,p": "Some optimization + speed",
    "mwcc_opt_level.-O1,s": "Some optimization + space",
    "mwcc_opt_level.-O2": "Standard optimization",
    "mwcc_opt_level.-O2,p": "Standard optimization + speed",
    "mwcc_opt_level.-O2,s": "Standard optimization + space",
    "mwcc_opt_level.-O3": "Heavy optimization",
    "mwcc_opt_level.-O3,p": "Heavy optimization + speed",
    "mwcc_opt_level.-O3,s": "Heavy optimization + space",
    "mwcc_opt_level.-O4": "Extreme optimization",
    "mwcc_opt_level.-O4,p": "Extreme optimization + speed",
    "mwcc_opt_level.-O4,s": "Extreme optimization + space",
    "mwcc_floating_point": "Floating point",
    "mwcc_floating_point.-fp soft": "Software emulation; default",
    "mwcc_floating_point.-fp off": "No floating point",
    "mwcc_floating_point.-fp hard": "Hardware",
    "mwcc_floating_point.-fp fmadd": "Hardware + -fp_contract",
    "mwcc_inline_options": "Inline options",
    "mwcc_inline_options.-inline on": "Turn on inlining for 'inline' functions; default",
    "mwcc_inline_options.-inline off": "Turn off inlining",
    "mwcc_inline_options.-inline auto": "Auto-inline small functions",
    "mwcc_inline_options.-inline noauto": "Do not auto-inline; default",
    "mwcc_inline_options.-inline all": "Turn on aggressive inlining: same as -inline on, auto'",
    "mwcc_inline_options.-inline deferred": "Defer inlining until end of compilation unit",
    "mwcc_string_constant_options": "String constant options",
    "mwcc_string_constant_options.-str reuse": "Equivalent strings are the same object; default",
    "mwcc_string_constant_options.-str pool": "Pool strings into a single data object",
    "mwcc_string_constant_options.-str readonly": "Make all string constants read-only",
    "mwcc_string_constant_options.-str reuse,pool,readonly": "Reuse + pool + readonly",
    "mwcc_source_language": "Source language",
    "mwcc_source_language.-lang=c": "C",
    "mwcc_source_language.-lang=c++": "C++",
    "mwcc_source_language.-lang=c99": "C99",
    "mwcc_source_language.-lang=ec++": "Embedded C++",
    "mwcc_source_language.-lang=objc": "Allow Objective C extensions",
    "mwcc_char_signedness": "Specifies the signedness of char",
    "mwcc_char_signedness.-char signed": "Signed",
    "mwcc_char_signedness.-char unsigned": "Unsigned",
    "mwcc_cpp_exceptions_off": "Disable C++ exceptions",
    "mwcc_enum_int": "Use int-sized enums",
    "mwcc_rostr": "Make string constants read-only",
    "mwcc_rtti_off": "Disable run-time typing information (for C++)",
    "mwcc_enc_sjis": "Specifies SJIS source encoding",
    "mwcc_fp_contract_on": "Generate fused multiply-add instructions",
    "mwcc_nodefaults": "Equivalent to '-nostdinc'",
    "mwcc_use_lmw_stmw_on": "Use multiple-word load/store instructions for structure copies; default",
    "mwcc_line_numbers_on": "Enable debug info (C line numbers)",
    "mwcc_align_powerpc": "PowerPC alignment; default",

    "psyq_opt_level": "Optimization level",
    "psyq_opt_level.-O0": "No optimization",
    "psyq_opt_level.-O1": "Some optimization",
    "psyq_opt_level.-O2": "Standard optimization",
    "psyq_opt_level.-O3": "Heavy optimization",
    "psyq_opt_level.-Os": "Size optimization",
    "psyq_debug_level": "Debug information",
    "psyq_debug_level.-g0": "No debug info",
    "psyq_debug_level.-g1": "Minimal trace info",
    "psyq_debug_level.-g2": "Local variable tracking",
    "psyq_debug_level.-g3": "Macro expansions",

    "gcc_char_type": "Char type",
    "gcc_char_type.-fsigned-char": "char will be signed",
    "gcc_char_type.-funsigned-char": "char will be unsigned",
    "mips_version": "Mips version",
    "kpic": "-non_shared if unchecked",
    "endianness": "Endianness",
    "endianness.-mel": "Little endian",
    "endianness.-meb": "Big endian",
    "sdata_limit": "Small data limit",
    "sdata_limit.-G0": "0 bytes",
    "sdata_limit.-G4": "4 bytes",
    "sdata_limit.-G8": "8 bytes",
    "mreg_names=32": "ABI FPR names",
    "mno_aliases": "Disable pseudo instructions",
    "no_show_rodata_refs": "Hide rodata refs in diff, e.g. jtbl labels",

    "diff_algorithm": "Diff algorithm",
    "diff_algorithm.-DIFFlevenshtein": "Levenshtein",
    "diff_algorithm.-DIFFdifflib": "difflib"
}
